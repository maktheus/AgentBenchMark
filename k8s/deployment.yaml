# üìÅ k8s/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: benchmark-service
  namespace: benchmark-service
  labels:
    app: benchmark-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: benchmark-service
  template:
    metadata:
      labels:
        app: benchmark-service
    spec:
      containers:
      - name: web
        image: ai-benchmark-service:latest
        ports:
        - containerPort: 8000
        envFrom:
        - secretRef:
            name: benchmark-secrets
        - configMapRef:
            name: benchmark-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: benchmark-service
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: benchmark-service
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        envFrom:
        - secretRef:
            name: postgres-secrets
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init