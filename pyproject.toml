# 🐍 Python Project Configuration

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-benchmark-service"
version = "1.2.0"
authors = [
    {name = "AI Benchmark Team", email = "team@benchmark.example.com"},
]
description = "Service for evaluating AI agents performance"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn>=0.23.2",
    "httpx>=0.25.0",
    "pydantic>=2.4.2",
    "celery>=5.3.4",
    "redis>=5.0.1",
    "sqlalchemy>=2.0.21",
    "alembic>=1.13.0",
    "python-dotenv>=1.0.0",
    "weasyprint>=58.0",
    "jinja2>=3.1.2",
    "tenacity>=8.2.3",
    "prometheus-client>=0.17.1",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "psycopg2-binary>=2.9.9",
    "pandas>=2.3.4",
    "numpy>=1.24.3",
    "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
testing = [
    "pytest>=7.4.2",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
]
dev = [
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.1",
    "bandit>=1.7.5",
    "safety>=2.3.5",
]

[project.urls]
"Homepage" = "https://github.com/your-org/benchmark-service"
"Bug Reports" = "https://github.com/your-org/benchmark-service/issues"
"Source" = "https://github.com/your-org/benchmark-service"
"Documentation" = "https://docs.benchmark.example.com"

[tool.setuptools.packages.find]
where = ["."]
include = ["benchmark_service*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
addopts = "-v --strict-markers"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "stress: Stress tests",
    "security: Security tests",
]

[tool.coverage.run]
source = ["benchmark_service"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[tool.bandit]
exclude_dirs = [".venv", "venv", "build", "dist"]
tests = ["B201", "B301"]
skips = ["B101"]